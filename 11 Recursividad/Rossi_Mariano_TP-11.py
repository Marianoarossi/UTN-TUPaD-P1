"""1) Crea una funci√≥n recursiva que calcule el factorial de un n√∫mero. Luego, 
utiliza esa funci√≥n para calcular y mostrar en pantalla el factorial de todos los
n√∫meros enteros entre 1 y el n√∫mero que indique el usuario"""

def factorial(num):
    # caso base
    if num == 0:
        return 1
    else:
        # Si no, multiplico el n√∫mero por el factorial del n√∫mero anterior
        return num * factorial(num - 1)

# Pido al usuario que ingrese un n√∫mero entero
numero = int(input("Ingrese un n√∫mero entero: "))

# Uso un for para calcular el factorial de cada n√∫mero desde 1 hasta el ingresado
for i in range(1, numero + 1):
    print(f"El factorial de {i} es {factorial(i)}")



"""
2) Crea una funci√≥n recursiva que calcule el valor de la serie de Fibonacci en la posici√≥n indicada.
Posteriormente, muestra la serie completa hasta la posici√≥n que el usuario especifique.
"""
def fibonacci(num):
    #CASO BASE Si el n√∫mero es 0 o 1, devuelvo el mismo n√∫mero 
    if num <= 1:
        return num
    else:
        # Por lo contrario sumo los dos valores anteriores (llamadas recursivas)
        return fibonacci(num - 1) + fibonacci(num - 2)

def mostrar_fibonacci(posicion):
    for i in range(posicion + 1):
        # Muestro cada valor de la serie en la misma l√≠nea
        print(fibonacci(i), end=" ")

# Pido al usuario que indique hasta qu√© posici√≥n mostrar la serie
posicion = int(input("Ingrese la posici√≥n de la serie de Fibonacci que desea mostrar: "))
mostrar_fibonacci(posicion)

"""3) Crea una funci√≥n recursiva que calcule la potencia de un n√∫mero base elevado a un exponente,
utilizando la f√≥rmula ùëõùëö= ùëõ‚àóùëõ(ùëö‚àí1). Prueba esta funci√≥n en un algoritmo general."""

def potencia(base, exponente):
    # Caso base: si el exponente es 0, devuelvo 1
    if exponente == 0:
        return 1
    else:
        # Multiplico la base por el resultado de la misma base con un exponente menos
        return base * potencia(base, exponente - 1)

# Pido los datos al usuario
base = int(input("Ingrese la base positiva : "))
exponente = int(input("Ingrese el exponente positivo : "))

# Llamo a la funci√≥n y muestro el resultado
resultado = potencia(base, exponente)
print(f"{base} elevado a la {exponente} es igual a {resultado}")

""" 4)_Crear una funci√≥n recursiva en Python que reciba un n√∫mero entero positivo en base decimal y devuelva 
su representaci√≥n en binario como una cadena de texto."""
def decimal_a_binario(n):
    #CASO BASE. Si el n√∫mero es menor que 2, devuelvo el mismo n√∫mero como string 
    if n < 2:
        return str(n)
    else:
        # Divido el n√∫mero por 2 y concateno el resto al final
        return decimal_a_binario(n // 2) + str(n % 2)

# Pido un n√∫mero al usuario
numero = int(input("Ingrese un n√∫mero entero positivo en base decimal: "))

# Verifico que el n√∫mero sea v√°lido (positivo)
if numero < 0:
    print("El n√∫mero ingresado no es v√°lido. Debe ser positivo.")
else:
    # Llamo a la funci√≥n y muestro el binario
    binario = decimal_a_binario(numero)
    print(f"El n√∫mero {numero} en binario es: {binario}")